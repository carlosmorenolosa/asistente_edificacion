# --------------------------------------------------
# Asistente T√©cnico Inteligente para Construcci√≥n
# Versi√≥n: UI Premium (abril 2025)
# --------------------------------------------------
# üëâ La l√≥gica de negocio RAG se mantiene intacta; solo se han aplicado
#    mejoras sustanciales en dise√±o y experiencia de usuario.
# --------------------------------------------------

import streamlit as st
import google.generativeai as genai
from pinecone import Pinecone
from datetime import datetime
import time

# ---------------- Configuraci√≥n -----------------
GENAI_API_KEY = st.secrets["general"]["genai_api_key"]
PINECONE_API_KEY = st.secrets["general"]["pinecone_api_key"]
INDEX_NAME = "documentacion-edificacion"
MIN_SIMILARITY_SCORE = 0.50  # 50 %

# ---------------- Inicializaci√≥n -----------------
genai.configure(api_key=GENAI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

pc = Pinecone(api_key=PINECONE_API_KEY)
index = pc.Index(INDEX_NAME)

# ---------------- Estilos globales -----------------
st.set_page_config(
    page_title="Asistente T√©cnico Inteligente",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        "Report a bug": "mailto:soporte@tuempresa.com",
        "About": "### Asistente T√©cnico\nHerramienta IA para consulta de documentaci√≥n de edificaci√≥n."
    },
)

# Configuraci√≥n de colores y UI
PRIMARY_COLOR = "#2E5EAA"
SECONDARY_COLOR = "#FFA630"
BACKGROUND_COLOR = "#FFFFFF"
ACCENT_COLOR = "#2E5EAA"
TEXT_COLOR = "#333333"
BORDER_RADIUS = "10px"

st.markdown(
    f"""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=DM+Sans:wght@400;500;700&display=swap');
        
        html, body, [class*="css"] {{
            font-family: 'Inter', sans-serif;
            scroll-behavior: smooth;
        }}
        
        .block-container {{
            padding-top: 0;
            padding-bottom: 2rem;
            max-width: 1200px;
        }}
        
        /* Encabezado */
        .app-header {{
            background: linear-gradient(90deg, {PRIMARY_COLOR} 0%, #1E3A6D 100%);
            padding: 1.8rem 2rem;
            border-radius: 0 0 16px 16px;
            color: #fff;
            margin-bottom: 2rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }}
        
        .app-header h1 {{
            font-family: 'DM Sans', sans-serif;
            font-weight: 700;
            font-size: 2rem;
            margin: 0;
            position: relative;
            z-index: 10;
        }}
        
        .app-header p {{
            margin: 0.5rem 0 0;
            font-size: 1rem;
            opacity: 0.9;
            position: relative;
            z-index: 10;
        }}
        
        /* Fragmentos */
        .fragment-container {{
            border-left: 4px solid {ACCENT_COLOR};
            background-color: #f8faff;
            padding: 1rem 1.2rem;
            border-radius: {BORDER_RADIUS};
            margin-bottom: 1rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: all 0.2s ease;
        }}
        
        .fragment-container:hover {{
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }}
        
        .fragment-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }}
        
        .fragment-source {{
            font-weight: 600;
            color: {PRIMARY_COLOR};
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }}
        
        .fragment-source-icon {{
            display: inline-block;
            width: 16px;
            height: 16px;
            background-color: {PRIMARY_COLOR};
            -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath d='M2 3.5A1.5 1.5 0 0 1 3.5 2h9A1.5 1.5 0 0 1 14 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 12.5v-9z'/%3E%3C/svg%3E") no-repeat center center / contain;
            mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath d='M2 3.5A1.5 1.5 0 0 1 3.5 2h9A1.5 1.5 0 0 1 14 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 12.5v-9z'/%3E%3C/svg%3E") no-repeat center center / contain;
        }}
        
        .fragment-score {{
            font-size: 0.8rem;
            color: #555;
        }}
        
        .fragment-content {{
            font-size: 0.92rem;
            white-space: pre-wrap;
            line-height: 1.5;
        }}
        
        /* Chat message tweaks */
        .stChatMessage {{
            border-radius: {BORDER_RADIUS};
            padding: 1rem !important;
            margin-bottom: 1.2rem !important;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border: 1px solid #eef2f8;
        }}
        
        .stChatMessageContent {{
            padding: 0 !important;
        }}
        
        div[data-testid="stChatMessageContent"] p {{
            margin-bottom: 0.8rem;
            line-height: 1.6;
        }}
        
        /* User chat message */
        .stChatMessage[data-testid="user-message"] {{
            background-color: #f0f7ff !important;
        }}
        
        /* Assistant chat message */
        .stChatMessage[data-testid="assistant-message"] {{
            background-color: #ffffff !important;
        }}
        
        /* Entrada de chat */
        .stChatInputContainer {{
            padding: 0.8rem !important;
            border-radius: {BORDER_RADIUS} !important;
            border: 1px solid #e1e4e8 !important;
            background: white !important;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }}
        
        


        
        [data-testid="stSidebarUserContent"] {{
            padding-top: 2rem;
        }}
        
        .stSidebar [data-testid="stMarkdownContainer"] h1, 
        .stSidebar [data-testid="stMarkdownContainer"] h2, 
        .stSidebar [data-testid="stMarkdownContainer"] h3 {{
            color: {PRIMARY_COLOR};
        }}
        
        /* Expander */
        .streamlit-expanderHeader {{
            font-size: 0.95rem;
            font-weight: 500;
            color: {PRIMARY_COLOR};
            background-color: #f8f9fa;
            border-radius: 6px;
        }}
        
        /* Toast */
        .stToast {{
            background-color: {PRIMARY_COLOR} !important;
            color: white !important;
            font-size: 0.9rem !important;
            border-radius: 8px !important;
        }}
        
        /* Spinner */
        .stSpinner > div > div {{
            border-top-color: {PRIMARY_COLOR} !important;
        }}
        
        /* Botones */
        .stButton button {{
            background-color: {PRIMARY_COLOR};
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s ease;
        }}
        
        .stButton button:hover {{
            background-color: #264b85;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }}
        
        /* Progress bar */
        .stProgress > div > div > div {{
            background-color: {PRIMARY_COLOR} !important;
        }}
        
        /* Footer */
        .app-footer {{
            text-align: center;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid #eaeaea;
            color: #666;
            font-size: 0.85rem;
        }}
        
        /* Badge styles */
        .badge {{
            display: inline-block;
            padding: 0.25em 0.6em;
            font-size: 0.75rem;
            font-weight: 600;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 10rem;
            color: #fff;
        }}
        
        .badge-success {{
            background-color: #28a745;
        }}
        
        .badge-warning {{
            background-color: #ffc107;
            color: #212529;
        }}
        
        .badge-danger {{
            background-color: #dc3545;
        }}
        
        /* Tooltip */
        .tooltip {{
            position: relative;
            display: inline-block;
            cursor: pointer;
        }}
        
        .tooltip .tooltip-text {{
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.8rem;
        }}
        
        .tooltip:hover .tooltip-text {{
            visibility: visible;
            opacity: 0.95;
        }}
        
        /* Separaci√≥n de elementos */
        .spacer {{
            height: 1.5rem;
        }}
        
        /* Animaciones */
        @keyframes fadeIn {{
            from {{ opacity: 0; transform: translateY(10px); }}
            to {{ opacity: 1; transform: translateY(0); }}
        }}
        
        .fadein {{
            animation: fadeIn 0.5s ease forwards;
        }}
        
        /* Texto en mensaje de chat */
        .citation-highlight {{
            background-color: #fff8e1;
            padding: 0 3px;
            border-radius: 3px;
            font-weight: 500;
        }}
        
        /* C√≥digo en las respuestas */
        code {{
            background-color: #f6f8fa;
            border-radius: 4px;
            padding: 2px 5px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 0.9em;
            color: #24292e;
        }}
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------------- Prompt Base (sin cambios) -----------------
custom_prompt = """
Eres un asistente t√©cnico inteligente especializado en documentaci√≥n de ingenier√≠a civil y proyectos de construcci√≥n.
Tu objetivo es proporcionar respuestas precisas, t√©cnicas y claras basadas √∫nicamente en la documentaci√≥n proporcionada.

Recibir√°s:
1. El historial de la conversaci√≥n actual
2. La √∫ltima consulta (la actual) del usuario, la cual tienes que responder.
3. Fragmentos relevantes de documentaci√≥n t√©cnica

Instrucciones:
- Utiliza el historial de la conversaci√≥n para entender el contexto de la consulta
- Responde principalmente con informaci√≥n contenida en los fragmentos proporcionados
- Usa terminolog√≠a t√©cnica apropiada para ingenieros
- Si la documentaci√≥n no contiene la informaci√≥n solicitada, ind√≠calo claramente
- S√© conciso pero completo en tus respuestas
- Cita n√∫meros de secci√≥n, especificaciones o normas t√©cnicas cuando est√©n disponibles en los fragmentos
- Cuando identifiques la respuesta, cita textualmente de qu√© parte de la documentaci√≥n la has sacado.

Tu estilo debe ser t√©cnico, preciso y objetivo.
"""

# ---------------- Estado de sesi√≥n -----------------
if "conversation" not in st.session_state:
    st.session_state.conversation = []
    
if "show_welcome" not in st.session_state:
    st.session_state.show_welcome = True

# ---------------- Funciones auxiliares -----------------

def display_fragments(fragments):
    """Renderiza los pasajes recuperados en un contenedor elegante."""
    if not fragments:
        st.info("üìö No se encontraron fragmentos relevantes para esta consulta.")
        return
    
    # Ordenar fragmentos por score (descendente)
    sorted_fragments = sorted(fragments, key=lambda x: x["score"], reverse=True)
    
    for frag in sorted_fragments:
        # Determinar el color del badge seg√∫n el score
        if frag["score"] >= 0.8:
            badge_class = "badge-success"
            relevance_text = "Alta relevancia"
        elif frag["score"] >= 0.6:
            badge_class = "badge-warning"
            relevance_text = "Relevancia media" 
        else:
            badge_class = "badge-danger"
            relevance_text = "Baja relevancia"
            
        # Formatear el texto para mostrar
        texto_formateado = frag['texto'].replace('\n', '<br>')
        
        st.markdown(
            f"""
            <div class="fragment-container fadein">
                <div class="fragment-header">
                    <div class="fragment-source">
                        üìÑ {frag['documento']}
                    </div>
                    <div class="fragment-score">
                        <span class="badge {badge_class}">{relevance_text} ({frag['score']:.0%})</span>
                    </div>
                </div>
                <div class="fragment-content">{texto_formateado}</div>
            </div>
            """,
            unsafe_allow_html=True,
        )
        st.markdown("""
        <style>
        /* Fondo gris oscuro de la sidebar */
        section[data-testid="stSidebar"] > div:first-child {
            background-color: #333333 !important;
        }
        
        /* Texto en blanco para contraste */
        section[data-testid="stSidebar"] p,
        section[data-testid="stSidebar"] h1,
        section[data-testid="stSidebar"] h2,
        section[data-testid="stSidebar"] h3,
        section[data-testid="stSidebar"] li {
            color: #FFFFFF !important;
        }
        </style>
        """, unsafe_allow_html=True)



def format_conversation_history(history):
    return "\n\n".join(f"{m['role']}: {m['content']}" for m in history)


def display_typing_animation():
    """Muestra una animaci√≥n de escritura para la respuesta del asistente."""
    with st.empty():
        for i in range(5):
            dots = "." * (i % 4)
            st.write(f"Generando respuesta{dots}")
            time.sleep(0.3)


# ---------------- Encabezado custom -----------------
with st.container():
    st.markdown(
        """
        <div class="app-header">
            <h1>üèóÔ∏è Asistente T√©cnico Inteligente para Construcci√≥n</h1>
            <p>Tu consultor experto en normativas, especificaciones t√©cnicas y documentaci√≥n de edificaci√≥n</p>
        </div>
        """,
        unsafe_allow_html=True,
    )

# ---------------- Sidebar -----------------
with st.sidebar:
    st.image("caeys_logo_3.png", use_container_width='auto') # <-- A√ëADIDO: Muestra la imagen
    st.header("üèóÔ∏è Asistente T√©cnico")
    st.header("üí° Gu√≠a r√°pida")
    
    st.markdown("""
        <div style="background-color: #f1f7fe; padding: 15px; border-radius: 8px; border-left: 4px solid #2E5EAA;">
            <h4 style="margin-top: 0; color: #2E5EAA;">¬øC√≥mo usar este asistente?</h4>
            <ol style="padding-left: 20px; margin-bottom: 0;">
                <li><strong>Formula tu consulta t√©cnica</strong> en el cuadro de chat inferior</li>
                <li><strong>Revisa la respuesta</strong> que cita fuentes documentales espec√≠ficas</li>
                <li><strong>Examina los fragmentos</strong> recuperados para m√°s contexto</li>
                <li><strong>Haz preguntas de seguimiento</strong> para aclarar o profundizar</li>
            </ol>
        </div>
    """, unsafe_allow_html=True)
    
    st.subheader("üîç Ejemplos de consultas")
    
    example_queries = [
        "¬øCu√°les son los requisitos m√≠nimos de resistencia al fuego en edificios residenciales?",
        "¬øQu√© normativa regula la instalaci√≥n de sistemas de ventilaci√≥n en s√≥tanos?",
        "Explica las especificaciones para cimentaciones en terrenos arcillosos",
        "¬øCu√°les son las dimensiones m√≠nimas para escaleras de evacuaci√≥n?",
    ]
    
    for query in example_queries:
        if st.button(f"üìù {query}", use_container_width=True, key=f"btn_{hash(query)}"):
            if "conversation" in st.session_state:
                st.session_state.conversation.append({"role": "Usuario", "content": query})
                st.experimental_rerun()

    st.divider()
    
    # Mostrar la versi√≥n y copyright
    col1, col2 = st.columns(2)
    with col1:
        st.caption("Versi√≥n: Demo Inicial")
    with col2:
        st.caption("{:%d-%m-%Y}".format(datetime.utcnow()))
    
    st.caption("¬© 2025 Caeys | Todos los derechos reservados")

# ---------------- Mensaje de bienvenida (solo la primera vez) -----------------
if st.session_state.show_welcome:
    st.info("""
    üëã **¬°Bienvenido al Asistente T√©cnico Inteligente!**
    
    Estoy aqu√≠ para resolver tus dudas sobre normativas, regulaciones y especificaciones t√©cnicas 
    en el √°mbito de la construcci√≥n y edificaci√≥n. Utilizo documentaci√≥n t√©cnica actualizada 
    como base para mis respuestas.
    
    üìù Puedes comenzar escribiendo tu consulta en el campo de abajo o seleccionar 
    uno de los ejemplos de la barra lateral.
    """)
    st.session_state.show_welcome = False

# ---------------- Mostrar historial -----------------
for msg in st.session_state.conversation:
    role = "assistant" if msg["role"] == "Asistente" else "user"
    
    with st.chat_message(role):
        st.markdown(msg["content"])
        if role == "assistant" and "fragments" in msg:
            with st.expander("üìö Ver fragmentos de documentaci√≥n recuperados"):
                display_fragments(msg["fragments"])

# ---------------- Entrada del usuario -----------------
user_message = st.chat_input("Escribe tu consulta t√©cnica aqu√≠...")

if user_message:
    # Ocultar el mensaje de bienvenida cuando se inicia la conversaci√≥n
    st.session_state.show_welcome = False
    
    # A√±adir mensaje del usuario al historial
    st.session_state.conversation.append({"role": "Usuario", "content": user_message})
    
    # Mostrar mensaje del usuario
    with st.chat_message("user"):
        st.markdown(user_message)

    # Mostrar el spinner y respuesta
    with st.chat_message("assistant"):
        with st.spinner("üîé Buscando en la documentaci√≥n t√©cnica..."):
            # Simular tiempos de procesamiento para mejorar la experiencia de usuario
            progress_text = "Analizando documentaci√≥n t√©cnica..."
            progress_bar = st.progress(0)
            
            # Simular progreso
            for i in range(101):
                if i < 30:
                    # Primera fase - Procesando consulta
                    progress_text = "Procesando consulta..."
                elif i < 60:
                    # Segunda fase - Buscando documentos relevantes
                    progress_text = "Buscando documentos relevantes..."
                elif i < 90:
                    # Tercera fase - Generando respuesta
                    progress_text = "Generando respuesta t√©cnica..."
                else:
                    # Fase final
                    progress_text = "Finalizando..."
                    
                if i % 10 == 0:
                    progress_bar.progress(i, text=progress_text)
                    time.sleep(0.05)
            
            progress_bar.empty()
            
            # (l√≥gica de embedding / b√∫squeda SIN CAMBIOS)
            embed_result = genai.embed_content(
                model="models/text-embedding-004",
                content=user_message,
            )
            query_vector = embed_result.get("embedding")

            if not query_vector:
                st.error("Error al generar el vector de embedding de la consulta.")
            else:
                query_response = index.query(vector=query_vector, top_k=10, include_metadata=True)
                retrieved_segments = []
                for match in query_response.get("matches", []):
                    score = match.get("score", 0)
                    if score >= MIN_SIMILARITY_SCORE:
                        md = match.get("metadata", {})
                        texto = md.get("texto", "")
                        doc = md.get("documento", "Documento sin nombre")
                        if texto:
                            retrieved_segments.append({
                                "texto": texto,
                                "documento": doc,
                                "score": score,
                            })

                retrieved_context = "\n---\n".join([
                    f"[{seg['documento']}]: {seg['texto']}" for seg in retrieved_segments
                ])
                history_for_prompt = st.session_state.conversation[:-1] if len(st.session_state.conversation) > 1 else []
                formatted_history = format_conversation_history(history_for_prompt)

                full_prompt = (
                    f"{custom_prompt}\n\n"
                    f"üìú **Historial de la conversaci√≥n:**\n{formatted_history}\n"
                    f"üìö **Fragmentos de documentaci√≥n relevantes:**\n{retrieved_context}\n\n"
                    f"üë§ **Consulta actual del usuario:** {user_message}"
                )

                # Mostrar animaci√≥n de "escribiendo..."
                typing_placeholder = st.empty()
                for i in range(3):
                    dots = "." * (i % 4)
                    typing_placeholder.markdown(f"*Redactando respuesta{dots}*")
                    time.sleep(0.4)
                typing_placeholder.empty()
                
                # Generar respuesta real
                response = model.generate_content(full_prompt)
                response_text = response.candidates[0].content.parts[0].text
                
                # Formatear la respuesta para resaltar las citas
                formatted_response = response_text
                
                # Guardar respuesta y fragmentos
                st.session_state.conversation.append(
                    {
                        "role": "Asistente",
                        "content": response_text,
                        "fragments": retrieved_segments,
                    }
                )
                
                # Mostrar respuesta
                st.markdown(formatted_response)
                
                # Mostrar fragmentos en un expander
                with st.expander("üìö Ver fragmentos de documentaci√≥n recuperados"):
                    display_fragments(retrieved_segments)
                
                # Preguntar por valoraci√≥n (opcional)
                feedback_col1, feedback_col2, feedback_col3 = st.columns([1, 1, 3])
                with feedback_col1:
                    st.button("üëç √ötil", key=f"useful_{len(st.session_state.conversation)}")
                with feedback_col2:
                    st.button("üëé No √∫til", key=f"not_useful_{len(st.session_state.conversation)}")
                
                # Notificaci√≥n de √©xito
                st.toast("‚úÖ Respuesta generada con √©xito", icon="ü§ñ")

# ---------------- Footer -----------------
st.markdown(
    """
    <div class="app-footer">
        <p>Asistente T√©cnico Inteligente para Construcci√≥n - Desarrollado por Caeys.es</p>
    </div>
    """,
    unsafe_allow_html=True,
)


